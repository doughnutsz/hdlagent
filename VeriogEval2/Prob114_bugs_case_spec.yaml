description: 'I would like you to implement a module named TopModule with the following
interface. All input and output ports are one bit unless otherwise
specified.

 - input  code (8 bits)
 - output out  (4 bits)
 - output valid

The module should recognize 8-bit keyboard scancodes for keys 0 through
9. It should indicate whether one of the 10 cases were recognized
(valid), and if so, which key was detected. If the 8-bit input is 8 h45,
8 h16, 8 h1e, 8 h26, 8 h25, 8 h2e, 8 h36, 8 h3d, 8 h3e, or 8 h46, the
4-bit output will be set to 0, 1, 2, 3, 4, 5, 6, 7, 8, or 9 respectively,
the 1-bit valid would be set to 1. If the input does not match any of the
cases, both output signals would be set to 0.'
interface: |-
  module RefModule (
    input [7:0] code,
    output reg [3:0] out,
    output reg valid
  );
  
    // uhh.. make a case statement: maps scancode to 0-9, but accidentally
    // infer a latch? and have one of the entries be wrong? (duplicate
    // case, using different base!)
  
    always @(*) begin
      out = 0;
      valid = 1;
      case (code)
        8'h45: out = 0;
        8'h16: out = 1;
        8'h1e: out = 2;
        8'h26: out = 3;
        8'h25: out = 4;
        8'h2e: out = 5;
        8'h36: out = 6;
        8'h3d: out = 7;
        8'h3e: out = 8;
        8'h46: out = 9;
        default: valid = 0;
      endcase
    end
  
  endmodule
bench_response: |
  module RefModule (
    input [7:0] code,
    output reg [3:0] out,
    output reg valid
  );
  
    // uhh.. make a case statement: maps scancode to 0-9, but accidentally
    // infer a latch? and have one of the entries be wrong? (duplicate
    // case, using different base!)
  
    always @(*) begin
      out = 0;
      valid = 1;
      case (code)
        8'h45: out = 0;
        8'h16: out = 1;
        8'h1e: out = 2;
        8'h26: out = 3;
        8'h25: out = 4;
        8'h2e: out = 5;
        8'h36: out = 6;
        8'h3d: out = 7;
        8'h3e: out = 8;
        8'h46: out = 9;
        default: valid = 0;
      endcase
    end
  
  endmodule
bench_test: |
  `timescale 1 ps/1 ps
  `define OK 12
  `define INCORRECT 13
  
  
  
  module stimulus_gen (
  	input clk,
  	output logic [7:0] code,
  	output reg[511:0] wavedrom_title,
  	output reg wavedrom_enable,
  	input tb_match
  );
  
  
  // Add two ports to module stimulus_gen:
  //    output [511:0] wavedrom_title
  //    output reg wavedrom_enable
  
  	task wavedrom_start(input[511:0] title = "");
  	endtask
  	
  	task wavedrom_stop;
  		#1;
  	endtask	
  
  
  	
  	initial begin
  		code <= 8'h45;
  		@(negedge clk) wavedrom_start("Decode scancodes");
  			@(posedge clk) code <= 8'h45;
  			@(posedge clk) code <= 8'h03;
  			@(posedge clk) code <= 8'h46;
  			@(posedge clk) code <= 8'h16;
  			@(posedge clk) code <= 8'd26;
  			@(posedge clk) code <= 8'h1e;
  			@(posedge clk) code <= 8'h25;
  			@(posedge clk) code <= 8'h26;
  			@(posedge clk) code <= 8'h2e;
  			@(posedge clk) code <= $random;
  			@(posedge clk) code <= 8'h36;
  			@(posedge clk) code <= $random;
  			@(posedge clk) code <= 8'h3d;
  			@(posedge clk) code <= 8'h3e;
  			@(posedge clk) code <= 8'h45;
  			@(posedge clk) code <= 8'h46;
  			@(posedge clk) code <= $random;
  			@(posedge clk) code <= $random;
  			@(posedge clk) code <= $random;
  			@(posedge clk) code <= $random;
  		wavedrom_stop();
  		
  		repeat(1000) @(posedge clk, negedge clk) begin
  			code <= $urandom;
  		end
  			
  		$finish;
  	end
  	
  endmodule
  
  module tb();
  
  	typedef struct packed {
  		int errors;
  		int errortime;
  		int errors_out;
  		int errortime_out;
  		int errors_valid;
  		int errortime_valid;
  
  		int clocks;
  	} stats;
  	
  	stats stats1;
  	
  	
  	wire[511:0] wavedrom_title;
  	wire wavedrom_enable;
  	int wavedrom_hide_after_time;
  	
  	reg clk=0;
  	initial forever
  		#5 clk = ~clk;
  
  	logic [7:0] code;
  	logic [3:0] out_ref;
  	logic [3:0] out_dut;
  	logic valid_ref;
  	logic valid_dut;
  
  	initial begin 
  		$dumpfile("wave.vcd");
  		$dumpvars(1, stim1.clk, tb_mismatch ,code,out_ref,out_dut,valid_ref,valid_dut );
  	end
  
  
  	wire tb_match;		// Verification
  	wire tb_mismatch = ~tb_match;
  	
  	stimulus_gen stim1 (
  		.clk,
  		.* ,
  		.code );
  	RefModule good1 (
  		.code,
  		.out(out_ref),
  		.valid(valid_ref) );
  		
  	TopModule top_module1 (
  		.code,
  		.out(out_dut),
  		.valid(valid_dut) );
  
  	
  	bit strobe = 0;
  	task wait_for_end_of_timestep;
  		repeat(5) begin
  			strobe <= !strobe;  // Try to delay until the very end of the time step.
  			@(strobe);
  		end
  	endtask	
  
  	
  	final begin
  		if (stats1.errors_out) $display("Hint: Output '%s' has %0d mismatches. First mismatch occurred at time %0d.", "out", stats1.errors_out, stats1.errortime_out);
  		else $display("Hint: Output '%s' has no mismatches.", "out");
  		if (stats1.errors_valid) $display("Hint: Output '%s' has %0d mismatches. First mismatch occurred at time %0d.", "valid", stats1.errors_valid, stats1.errortime_valid);
  		else $display("Hint: Output '%s' has no mismatches.", "valid");
  
  		$display("Hint: Total mismatched samples is %1d out of %1d samples\n", stats1.errors, stats1.clocks);
  		$display("Simulation finished at %0d ps", $time);
  		$display("Mismatches: %1d in %1d samples", stats1.errors, stats1.clocks);
  	end
  	
  	// Verification: XORs on the right makes any X in good_vector match anything, but X in dut_vector will only match X.
  	assign tb_match = ( { out_ref, valid_ref } === ( { out_ref, valid_ref } ^ { out_dut, valid_dut } ^ { out_ref, valid_ref } ) );
  	// Use explicit sensitivity list here. @(*) causes NetProc::nex_input() to be called when trying to compute
  	// the sensitivity list of the @(strobe) process, which isn't implemented.
  	always @(posedge clk, negedge clk) begin
  
  		stats1.clocks++;
  		if (!tb_match) begin
  			if (stats1.errors == 0) stats1.errortime = $time;
  			stats1.errors++;
  		end
  		if (out_ref !== ( out_ref ^ out_dut ^ out_ref ))
  		begin if (stats1.errors_out == 0) stats1.errortime_out = $time;
  			stats1.errors_out = stats1.errors_out+1'b1; end
  		if (valid_ref !== ( valid_ref ^ valid_dut ^ valid_ref ))
  		begin if (stats1.errors_valid == 0) stats1.errortime_valid = $time;
  			stats1.errors_valid = stats1.errors_valid+1'b1; end
  
  	end
  
     // add timeout after 100K cycles
     initial begin
       #1000000
       $display("TIMEOUT");
       $finish();
     end
  
  endmodule
