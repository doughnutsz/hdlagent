description: 'I would like you to implement a module named TopModule with the following
interface. All input and output ports are one bit unless otherwise
specified.

 - input  clk
 - input  load
 - input  ena  (  2 bits)
 - input  data (100 bits)
 - output q    (100 bits)

The module should implement a 100-bit left/right rotator, with
synchronous load and left/right enable. A rotator shifts-in the
shifted-out bit from the other end of the register, unlike a shifter that
discards the shifted-out bit and shifts in a zero. If enabled, a rotator
rotates the bits around and does not modify/discard them.

  (1) load: Loads shift register with data[99:0] instead of rotating.
      Synchronous active high.

  (2) ena[1:0]: Synchronous. Chooses whether and which direction to
      rotate:
      (a) 2 b01 rotates right by one bit,
      (b) 2 b10 rotates left by one bit,
      (c) 2 b00 and 2 b11 do not rotate.

  (3) q: The contents of the rotator.'
interface: |-
  module RefModule (
    input clk,
    input load,
    input [1:0] ena,
    input [99:0] data,
    output reg [99:0] q
  );
  
    always @(posedge clk) begin
      if (load)
        q <= data;
      else if (ena == 2'h1)
        q <= {q[0], q[99:1]};
      else if (ena == 2'h2)
        q <= {q[98:0], q[99]};
    end
  
  endmodule
bench_response: |
  module RefModule (
    input clk,
    input load,
    input [1:0] ena,
    input [99:0] data,
    output reg [99:0] q
  );
  
    always @(posedge clk) begin
      if (load)
        q <= data;
      else if (ena == 2'h1)
        q <= {q[0], q[99:1]};
      else if (ena == 2'h2)
        q <= {q[98:0], q[99]};
    end
  
  endmodule
bench_test: |
  `timescale 1 ps/1 ps
  `define OK 12
  `define INCORRECT 13
  
  
  module stimulus_gen (
  	input clk,
  	output reg load,
  	output reg[1:0] ena,
  	output reg[99:0] data
  );
  
  	always @(posedge clk)
  		data <= {$random,$random,$random,$random};
  	
  	initial begin
  		load <= 1;
  		@(posedge clk);
  		@(posedge clk);
  		@(posedge clk);
  		repeat(4000) @(posedge clk, negedge clk) begin
  			load <= !($random & 31);
  			ena <= $random;
  		end
  		#1 $finish;
  	end
  	
  endmodule
  
  module tb();
  
  	typedef struct packed {
  		int errors;
  		int errortime;
  		int errors_q;
  		int errortime_q;
  
  		int clocks;
  	} stats;
  	
  	stats stats1;
  	
  	
  	wire[511:0] wavedrom_title;
  	wire wavedrom_enable;
  	int wavedrom_hide_after_time;
  	
  	reg clk=0;
  	initial forever
  		#5 clk = ~clk;
  
  	logic load;
  	logic [1:0] ena;
  	logic [99:0] data;
  	logic [99:0] q_ref;
  	logic [99:0] q_dut;
  
  	initial begin 
  		$dumpfile("wave.vcd");
  		$dumpvars(1, stim1.clk, tb_mismatch ,clk,load,ena,data,q_ref,q_dut );
  	end
  
  
  	wire tb_match;		// Verification
  	wire tb_mismatch = ~tb_match;
  	
  	stimulus_gen stim1 (
  		.clk,
  		.* ,
  		.load,
  		.ena,
  		.data );
  	RefModule good1 (
  		.clk,
  		.load,
  		.ena,
  		.data,
  		.q(q_ref) );
  		
  	TopModule top_module1 (
  		.clk,
  		.load,
  		.ena,
  		.data,
  		.q(q_dut) );
  
  	
  	bit strobe = 0;
  	task wait_for_end_of_timestep;
  		repeat(5) begin
  			strobe <= !strobe;  // Try to delay until the very end of the time step.
  			@(strobe);
  		end
  	endtask	
  
  	
  	final begin
  		if (stats1.errors_q) $display("Hint: Output '%s' has %0d mismatches. First mismatch occurred at time %0d.", "q", stats1.errors_q, stats1.errortime_q);
  		else $display("Hint: Output '%s' has no mismatches.", "q");
  
  		$display("Hint: Total mismatched samples is %1d out of %1d samples\n", stats1.errors, stats1.clocks);
  		$display("Simulation finished at %0d ps", $time);
  		$display("Mismatches: %1d in %1d samples", stats1.errors, stats1.clocks);
  	end
  	
  	// Verification: XORs on the right makes any X in good_vector match anything, but X in dut_vector will only match X.
  	assign tb_match = ( { q_ref } === ( { q_ref } ^ { q_dut } ^ { q_ref } ) );
  	// Use explicit sensitivity list here. @(*) causes NetProc::nex_input() to be called when trying to compute
  	// the sensitivity list of the @(strobe) process, which isn't implemented.
  	always @(posedge clk, negedge clk) begin
  
  		stats1.clocks++;
  		if (!tb_match) begin
  			if (stats1.errors == 0) stats1.errortime = $time;
  			stats1.errors++;
  		end
  		if (q_ref !== ( q_ref ^ q_dut ^ q_ref ))
  		begin if (stats1.errors_q == 0) stats1.errortime_q = $time;
  			stats1.errors_q = stats1.errors_q+1'b1; end
  
  	end
  
     // add timeout after 100K cycles
     initial begin
       #1000000
       $display("TIMEOUT");
       $finish();
     end
  
  endmodule
